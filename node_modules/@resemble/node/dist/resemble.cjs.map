{"version":3,"file":"resemble.cjs","sources":["../src/context.ts","../src/v2/util.ts","../src/v2/projects.ts","../src/v2/clips.ts","../src/v2/recordings.ts","../src/v2/voices.ts","../src/resemble.ts"],"sourcesContent":["let apiKey: string | undefined = ''\nlet baseUrl: string | undefined = 'https://app.resemble.ai/api/'\nlet synthesisServerUrl: string | undefined = ''\n\nconst synthesisServerHeaders: Record<string, string> = {\n  'Content-Type': 'application/json',\n  'x-access-token': `${apiKey}`\n}\n\nconst headers: Record<string, string> = {\n  'Content-Type': 'application/json',\n  'Authorization': `Token token=${apiKey}`\n}\n\nexport const context = {\n  headers: () => headers,\n  synthesisServerHeaders: () => synthesisServerHeaders,\n  \n  setBaseUrl: (url: string) => {\n    baseUrl = url\n\n    if (!url.endsWith('/')) {\n      baseUrl += '/'\n    }\n  },\n\n  setApiKey: (key: string) => {\n    apiKey = key\n    headers['Authorization'] = `Token token=${key}`\n    synthesisServerHeaders['x-access-token'] = key\n  },\n  \n  setSynthesisUrl: (url: string) => {\n    synthesisServerUrl = url\n    \n    if (!url.endsWith('/')) {\n      synthesisServerUrl += '/'\n    }\n  },\n  \n  endpoint: (version: string, endpoint: string): string => {\n    let ending = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint\n    return `${baseUrl}${version}/${ending}`\n  },\n  \n  synServerUrl: (endpoint) => {\n    let ending = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint\n    return `${synthesisServerUrl}${ending}`\n  }\n}  \n","import { context } from \"../context\"\n\nexport interface ReadResponseV2<T> {\n  success: boolean\n  message?: string\n  item: T | null\n}\n\nexport interface WriteResponseV2<T> {\n  success: boolean\n  message?: string\n  /* The item is returned when the write operation succeeds */\n  item?: T\n}\n\nexport interface UpdateResponseV2<T> {\n  success: boolean\n  message?: string\n  /* The item is returned when the update operation succeeds */\n  item?: T\n}\n\nexport interface DeleteResponseV2 {\n  success: boolean\n  message?: string\n}\n\nexport interface PaginationResponseV2<T> {\n  success: boolean,\n  message?: string,\n  page: number,\n  num_pages: number,\n  page_size: number,\n  items: T[]\n}\n\nexport interface ErrorResponseV2 {\n  success: false\n  message: string\n}\n\nexport default {\n  get: (path: string, useSynthesisServer: boolean = false) => fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'GET', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers() }),\n  post: (path: string, data: Record<string, any> = {}, useSynthesisServer: boolean = false) =>  fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'POST', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers(), body: JSON.stringify(data) }),\n  put: (path: string, data: Record<string, any> = {}, useSynthesisServer: boolean = false) => fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'PUT', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers(), body: JSON.stringify(data) }),\n  delete: (path: string, useSynthesisServer: boolean = false) => fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'DELETE', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers() }),\n\n  errorResponse: (e: any): ErrorResponseV2 => ({\n    success: false,\n    message: `Library error: ${e}`\n  })\n}\n","import UtilV2, { DeleteResponseV2, ErrorResponseV2, PaginationResponseV2, ReadResponseV2, UpdateResponseV2, WriteResponseV2 } from \"./util\"\n\nexport interface Project {\n  uuid: string\n  name: string\n  description: string\n  is_public: boolean\n  is_collaborative: boolean\n  is_archived: boolean\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface ProjectInput {\n  name: string\n  description: string\n  is_public: boolean\n  is_collaborative: boolean\n  is_archived: boolean\n}\n\nexport default {\n  all: async (page: number, pageSize?: number): Promise<PaginationResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n\n  get: async (uuid: string): Promise<ReadResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  create: async (projectInput: ProjectInput): Promise<WriteResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.post('projects', projectInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n\n  update: async (uuid: string, projectInput: ProjectInput): Promise<UpdateResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.put(`projects/${uuid}`, projectInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n\n  destroy: async (uuid: string): Promise<DeleteResponseV2 | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.delete(`projects/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n\n}","import UtilV2, { ErrorResponseV2, PaginationResponseV2, ReadResponseV2, WriteResponseV2 } from \"./util\"\n// import { DEFAULT_BUFFER_SIZE, StreamDecoder } from './StreamDecoder'\n\nexport interface Clip {\n  uuid: string\n  title: string\n  body: string\n  voice_uuid: string\n  is_public: boolean\n  is_archived: boolean\n  timestamps?: any\n  audio_src?: string\n  raw_audio?: any\n  created_at: Date\n  updated_at: Date\n}\n\n\ninterface ClipInput {\n  title?: string\n  body: string\n  voice_uuid: string\n  is_public: boolean\n  is_archived: boolean\n  sample_rate?: 16000 | 22050 | 44100\n  output_format?: 'wav' | 'mp3'\n  precision?: 'PCM_16' | 'PCM_32'\n  include_timestamps?: boolean\n}\n\nexport interface SyncClipInput extends ClipInput {\n  raw?: boolean\n}\n\nexport interface AsyncClipInput extends ClipInput {\n  callback_uri: string\n}\n\nexport interface StreamInput {\n  data: string\n  project_uuid: string\n  voice_uuid: string\n}\n\nconst create = async (projectUuid: string, clipInput: ClipInput) => {\n  try {\n    const response = await UtilV2.post(`projects/${projectUuid}/clips`, clipInput)\n    let json = await response.json()\n    if (json.success) {\n      json = {\n        ...json,\n        item: {\n          ...json.item,\n          created_at: new Date(json.item.created_at),\n          updated_at: new Date(json.item.updated_at)\n        }\n      }\n    }\n    return json\n  } catch (e) {\n    return UtilV2.errorResponse(e)\n  }\n}\n\nexport default {\n  all: async (projectUuid: string, page: number, pageSize: number): Promise<PaginationResponseV2<Clip> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects/${projectUuid}/clips?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  get: async (projectUuid: string, uuid: string): Promise<ReadResponseV2<Clip> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects/${projectUuid}/clips/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n\n  \n  createAsync: async (projectUuid: string, clipInput: AsyncClipInput): Promise<WriteResponseV2<Clip> | ErrorResponseV2> => {\n    return create(projectUuid, clipInput)\n  },\n\n  createSync: async (projectUuid: string, clipInput: SyncClipInput): Promise<WriteResponseV2<Clip> | ErrorResponseV2> => {\n    return create(projectUuid, clipInput)\n  },\n  \n  // stream: async function* (streamInput, bufferSize = DEFAULT_BUFFER_SIZE, ignoreWavHeader = true): AsyncGenerator {\n  //   try {\n  //     const response = await UtilV2.post('stream', streamInput, true)\n  \n  //     // check for error response\n  //     if (!response.ok) {\n  //       const isJson = response.headers.get('content-type')?.includes('application/json');\n  //       const data = isJson ? await response.json() : null;\n  //       const error = (data && data.message) || response.status;\n  //       throw Error(error);\n  //     }\n  \n  //     const streamDecoder = new StreamDecoder(bufferSize, ignoreWavHeader)\n  //     streamDecoder.reset()\n  \n  //     // Iterate over the stream and start decoding, and returning data\n  //     for await (const chunk of response.body!) {\n  //       streamDecoder.decodeChunk(chunk)\n  //       const buffer = streamDecoder.flushBuffer()\n  //       if (buffer !== null)\n  //         yield buffer\n  //     }\n  \n  //     // Keep draining the buffer until the buffer.length < bufferSize or buffer.length == 0\n  //     let buffer = streamDecoder.flushBuffer()\n  //     while (buffer !== null) {\n  //       const buffToReturn = Buffer.from(buffer)\n  //       buffer = streamDecoder.flushBuffer()\n  //       yield buffToReturn\n  //     }\n  \n  //     // Drain any leftover content in the buffer, buffer.length will always be less than bufferSize here\n  //     buffer = streamDecoder.flushBuffer(true)\n  //     if (buffer !== null)\n  //       yield buffer\n  //   } catch (e) {\n  //     return UtilV2.errorResponse(e)\n  //   }\n  // }\n  \n  updateAsync: async (projectUuid: string, uuid: string, clipInput: AsyncClipInput) => {\n    try {\n      const response = await UtilV2.put(`projects/${projectUuid}/clips/${uuid}`, clipInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  destroy: async (projectUuid: string, uuid: string) => {\n    try {\n      const response = await UtilV2.delete(`projects/${projectUuid}/clips/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n}\n","import fetch from 'isomorphic-fetch'\nimport FormData from 'isomorphic-form-data'\nimport { context } from '../context'\nimport UtilV2, { ErrorResponseV2, PaginationResponseV2, UpdateResponseV2, DeleteResponseV2, ReadResponseV2, WriteResponseV2 } from \"./util\"\n\nexport interface Recording {\n  uuid: string\n  name: string\n  text: string\n  emotion: string\n  is_active: boolean\n  audio_src: string\n  created_at: Date\n  updated_at: Date\n}\n\n\nexport interface RecordingInput {\n  name: string\n  text: string\n  emotion: string\n  is_active: boolean\n}\n\nexport default {\n  all: async (voiceUuid: string, page: number, pageSize: number): Promise<PaginationResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices/${voiceUuid}/recordings?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  get: async (voiceUuid: string, uuid: string): Promise<ReadResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices/${voiceUuid}/recordings/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  create: async (voiceUuid: string, recordingInput: RecordingInput, buffer: Buffer, fileSizeInBytes: number): Promise<WriteResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const formData = new FormData()\n      formData.append('name', recordingInput.name)\n      formData.append('text', recordingInput.text)\n      formData.append('emotion', recordingInput.emotion)\n      formData.append('is_active', recordingInput.is_active ? 'true' : 'false')\n      formData.append('file', buffer, { knownLength: fileSizeInBytes })\n  \n      const response = await fetch(context.endpoint('v2', `voices/${voiceUuid}/recordings`), {\n        method: 'POST',\n        headers: {\n          Authorization: context.headers().Authorization,\n          'Content-Type': 'multipart/form-data',\n          ...formData.getHeaders ? formData.getHeaders() : {}\n        },\n        body: formData\n      })\n  \n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  update: async (voiceUuid: string, uuid: string, recordingInput: RecordingInput): Promise<UpdateResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.put(`voices/${voiceUuid}/recordings/${uuid}`, recordingInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  destroy: async (voiceUuid: string, uuid: string): Promise<DeleteResponseV2 | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.delete(`voices/${voiceUuid}/recordings/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n\n}\n\n","import UtilV2, { DeleteResponseV2, ErrorResponseV2, PaginationResponseV2, ReadResponseV2, UpdateResponseV2, WriteResponseV2 } from \"./util\"\n\nexport interface Voice {\n  uuid: string\n  name: string\n  status: string\n  default_language: string\n  supported_languages: string[]\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface VoiceInput {\n  name: string\n  dataset_url?: string\n  callback_uri?: string\n}\n\nexport default {\n  all: async (page: number, pageSize: number): Promise<PaginationResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  get: async (uuid: string): Promise<ReadResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  create: async (voiceInput: VoiceInput): Promise<WriteResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.post('voices', voiceInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  update: async (uuid: string, voiceInput: VoiceInput): Promise<UpdateResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.put(`voices/${uuid}`, voiceInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  destroy: async (uuid: string): Promise<DeleteResponseV2 | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.delete(`voices/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  build: async (uuid: string): Promise<{ success: boolean, message?: string } | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.post(`voices/${uuid}/build`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n}","import { context } from './context'\nimport ProjectsV2 from './v2/projects'\nimport ClipsV2 from './v2/clips'\nimport RecordingsV2 from './v2/recordings'\nimport VoicesV2 from './v2/voices'\n\n\nexport const Resemble = {\n  setApiKey: context.setApiKey,\n  setBaseUrl: context.setBaseUrl,\n  setSynthesisUrl: context.setSynthesisUrl,\n  \n  v2: {\n    projects: {\n      all: ProjectsV2.all,\n      create: ProjectsV2.create,\n      update: ProjectsV2.update,\n      get: ProjectsV2.get,\n      delete: ProjectsV2.destroy,\n    },\n    clips: {\n      all: ClipsV2.all,\n      createSync: ClipsV2.createSync,\n      createAsync: ClipsV2.createAsync,\n      updateAsync: ClipsV2.updateAsync,\n      // stream: ClipsV2.stream,\n      get: ClipsV2.get,\n      delete: ClipsV2.destroy,\n    },\n    voices: {\n      all: VoicesV2.all,\n      create: VoicesV2.create,\n      update: VoicesV2.update,\n      build: VoicesV2.build,\n      get: VoicesV2.get,\n      delete: VoicesV2.destroy,\n    },\n    recordings: {\n      all: RecordingsV2.all,\n      get: RecordingsV2.get,\n      create: RecordingsV2.create,\n      update: RecordingsV2.update,\n      delete: RecordingsV2.destroy,\n    },\n  },\n}\n"],"names":["apiKey","baseUrl","synthesisServerHeaders","_headers","Authorization","context","headers","setBaseUrl","url","endsWith","setApiKey","key","setSynthesisUrl","synthesisServerUrl","endpoint","version","ending","startsWith","substring","synServerUrl","UtilV2","path","useSynthesisServer","fetch","method","data","body","JSON","stringify","e","success","message","ProjectsV2","all","page","pageSize","Promise","resolve","_catch","then","response","json","items","map","item","created_at","updated_at","reject","get","uuid","_extends","Date","create","projectInput","update","destroy","projectUuid","clipInput","createAsync","createSync","updateAsync","RecordingsV2","voiceUuid","recordingInput","buffer","fileSizeInBytes","formData","FormData","append","name","text","emotion","is_active","knownLength","getHeaders","VoicesV2","voiceInput","build","v2","projects","delete","clips","ClipsV2","voices","recordings"],"mappings":"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"}