{"version":3,"file":"resemble.modern.js","sources":["../src/context.ts","../src/v2/util.ts","../src/v2/projects.ts","../src/v2/clips.ts","../src/v2/recordings.ts","../src/v2/voices.ts","../src/resemble.ts"],"sourcesContent":["let apiKey: string | undefined = ''\nlet baseUrl: string | undefined = 'https://app.resemble.ai/api/'\nlet synthesisServerUrl: string | undefined = ''\n\nconst synthesisServerHeaders: Record<string, string> = {\n  'Content-Type': 'application/json',\n  'x-access-token': `${apiKey}`\n}\n\nconst headers: Record<string, string> = {\n  'Content-Type': 'application/json',\n  'Authorization': `Token token=${apiKey}`\n}\n\nexport const context = {\n  headers: () => headers,\n  synthesisServerHeaders: () => synthesisServerHeaders,\n  \n  setBaseUrl: (url: string) => {\n    baseUrl = url\n\n    if (!url.endsWith('/')) {\n      baseUrl += '/'\n    }\n  },\n\n  setApiKey: (key: string) => {\n    apiKey = key\n    headers['Authorization'] = `Token token=${key}`\n    synthesisServerHeaders['x-access-token'] = key\n  },\n  \n  setSynthesisUrl: (url: string) => {\n    synthesisServerUrl = url\n    \n    if (!url.endsWith('/')) {\n      synthesisServerUrl += '/'\n    }\n  },\n  \n  endpoint: (version: string, endpoint: string): string => {\n    let ending = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint\n    return `${baseUrl}${version}/${ending}`\n  },\n  \n  synServerUrl: (endpoint) => {\n    let ending = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint\n    return `${synthesisServerUrl}${ending}`\n  }\n}  \n","import { context } from \"../context\"\n\nexport interface ReadResponseV2<T> {\n  success: boolean\n  message?: string\n  item: T | null\n}\n\nexport interface WriteResponseV2<T> {\n  success: boolean\n  message?: string\n  /* The item is returned when the write operation succeeds */\n  item?: T\n}\n\nexport interface UpdateResponseV2<T> {\n  success: boolean\n  message?: string\n  /* The item is returned when the update operation succeeds */\n  item?: T\n}\n\nexport interface DeleteResponseV2 {\n  success: boolean\n  message?: string\n}\n\nexport interface PaginationResponseV2<T> {\n  success: boolean,\n  message?: string,\n  page: number,\n  num_pages: number,\n  page_size: number,\n  items: T[]\n}\n\nexport interface ErrorResponseV2 {\n  success: false\n  message: string\n}\n\nexport default {\n  get: (path: string, useSynthesisServer: boolean = false) => fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'GET', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers() }),\n  post: (path: string, data: Record<string, any> = {}, useSynthesisServer: boolean = false) =>  fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'POST', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers(), body: JSON.stringify(data) }),\n  put: (path: string, data: Record<string, any> = {}, useSynthesisServer: boolean = false) => fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'PUT', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers(), body: JSON.stringify(data) }),\n  delete: (path: string, useSynthesisServer: boolean = false) => fetch((useSynthesisServer ? context.synServerUrl : context.endpoint)('v2', path), { method: 'DELETE', headers: useSynthesisServer ? context.synthesisServerHeaders() : context.headers() }),\n\n  errorResponse: (e: any): ErrorResponseV2 => ({\n    success: false,\n    message: `Library error: ${e}`\n  })\n}\n","import UtilV2, { DeleteResponseV2, ErrorResponseV2, PaginationResponseV2, ReadResponseV2, UpdateResponseV2, WriteResponseV2 } from \"./util\"\n\nexport interface Project {\n  uuid: string\n  name: string\n  description: string\n  is_public: boolean\n  is_collaborative: boolean\n  is_archived: boolean\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface ProjectInput {\n  name: string\n  description: string\n  is_public: boolean\n  is_collaborative: boolean\n  is_archived: boolean\n}\n\nexport default {\n  all: async (page: number, pageSize?: number): Promise<PaginationResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n\n  get: async (uuid: string): Promise<ReadResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  create: async (projectInput: ProjectInput): Promise<WriteResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.post('projects', projectInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n\n  update: async (uuid: string, projectInput: ProjectInput): Promise<UpdateResponseV2<Project> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.put(`projects/${uuid}`, projectInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n\n  destroy: async (uuid: string): Promise<DeleteResponseV2 | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.delete(`projects/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n\n}","import UtilV2, { ErrorResponseV2, PaginationResponseV2, ReadResponseV2, WriteResponseV2 } from \"./util\"\n// import { DEFAULT_BUFFER_SIZE, StreamDecoder } from './StreamDecoder'\n\nexport interface Clip {\n  uuid: string\n  title: string\n  body: string\n  voice_uuid: string\n  is_public: boolean\n  is_archived: boolean\n  timestamps?: any\n  audio_src?: string\n  raw_audio?: any\n  created_at: Date\n  updated_at: Date\n}\n\n\ninterface ClipInput {\n  title?: string\n  body: string\n  voice_uuid: string\n  is_public: boolean\n  is_archived: boolean\n  sample_rate?: 16000 | 22050 | 44100\n  output_format?: 'wav' | 'mp3'\n  precision?: 'PCM_16' | 'PCM_32'\n  include_timestamps?: boolean\n}\n\nexport interface SyncClipInput extends ClipInput {\n  raw?: boolean\n}\n\nexport interface AsyncClipInput extends ClipInput {\n  callback_uri: string\n}\n\nexport interface StreamInput {\n  data: string\n  project_uuid: string\n  voice_uuid: string\n}\n\nconst create = async (projectUuid: string, clipInput: ClipInput) => {\n  try {\n    const response = await UtilV2.post(`projects/${projectUuid}/clips`, clipInput)\n    let json = await response.json()\n    if (json.success) {\n      json = {\n        ...json,\n        item: {\n          ...json.item,\n          created_at: new Date(json.item.created_at),\n          updated_at: new Date(json.item.updated_at)\n        }\n      }\n    }\n    return json\n  } catch (e) {\n    return UtilV2.errorResponse(e)\n  }\n}\n\nexport default {\n  all: async (projectUuid: string, page: number, pageSize: number): Promise<PaginationResponseV2<Clip> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects/${projectUuid}/clips?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  get: async (projectUuid: string, uuid: string): Promise<ReadResponseV2<Clip> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`projects/${projectUuid}/clips/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n\n  \n  createAsync: async (projectUuid: string, clipInput: AsyncClipInput): Promise<WriteResponseV2<Clip> | ErrorResponseV2> => {\n    return create(projectUuid, clipInput)\n  },\n\n  createSync: async (projectUuid: string, clipInput: SyncClipInput): Promise<WriteResponseV2<Clip> | ErrorResponseV2> => {\n    return create(projectUuid, clipInput)\n  },\n  \n  // stream: async function* (streamInput, bufferSize = DEFAULT_BUFFER_SIZE, ignoreWavHeader = true): AsyncGenerator {\n  //   try {\n  //     const response = await UtilV2.post('stream', streamInput, true)\n  \n  //     // check for error response\n  //     if (!response.ok) {\n  //       const isJson = response.headers.get('content-type')?.includes('application/json');\n  //       const data = isJson ? await response.json() : null;\n  //       const error = (data && data.message) || response.status;\n  //       throw Error(error);\n  //     }\n  \n  //     const streamDecoder = new StreamDecoder(bufferSize, ignoreWavHeader)\n  //     streamDecoder.reset()\n  \n  //     // Iterate over the stream and start decoding, and returning data\n  //     for await (const chunk of response.body!) {\n  //       streamDecoder.decodeChunk(chunk)\n  //       const buffer = streamDecoder.flushBuffer()\n  //       if (buffer !== null)\n  //         yield buffer\n  //     }\n  \n  //     // Keep draining the buffer until the buffer.length < bufferSize or buffer.length == 0\n  //     let buffer = streamDecoder.flushBuffer()\n  //     while (buffer !== null) {\n  //       const buffToReturn = Buffer.from(buffer)\n  //       buffer = streamDecoder.flushBuffer()\n  //       yield buffToReturn\n  //     }\n  \n  //     // Drain any leftover content in the buffer, buffer.length will always be less than bufferSize here\n  //     buffer = streamDecoder.flushBuffer(true)\n  //     if (buffer !== null)\n  //       yield buffer\n  //   } catch (e) {\n  //     return UtilV2.errorResponse(e)\n  //   }\n  // }\n  \n  updateAsync: async (projectUuid: string, uuid: string, clipInput: AsyncClipInput) => {\n    try {\n      const response = await UtilV2.put(`projects/${projectUuid}/clips/${uuid}`, clipInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  destroy: async (projectUuid: string, uuid: string) => {\n    try {\n      const response = await UtilV2.delete(`projects/${projectUuid}/clips/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n}\n","import fetch from 'isomorphic-fetch'\nimport FormData from 'isomorphic-form-data'\nimport { context } from '../context'\nimport UtilV2, { ErrorResponseV2, PaginationResponseV2, UpdateResponseV2, DeleteResponseV2, ReadResponseV2, WriteResponseV2 } from \"./util\"\n\nexport interface Recording {\n  uuid: string\n  name: string\n  text: string\n  emotion: string\n  is_active: boolean\n  audio_src: string\n  created_at: Date\n  updated_at: Date\n}\n\n\nexport interface RecordingInput {\n  name: string\n  text: string\n  emotion: string\n  is_active: boolean\n}\n\nexport default {\n  all: async (voiceUuid: string, page: number, pageSize: number): Promise<PaginationResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices/${voiceUuid}/recordings?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  get: async (voiceUuid: string, uuid: string): Promise<ReadResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices/${voiceUuid}/recordings/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  create: async (voiceUuid: string, recordingInput: RecordingInput, buffer: Buffer, fileSizeInBytes: number): Promise<WriteResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const formData = new FormData()\n      formData.append('name', recordingInput.name)\n      formData.append('text', recordingInput.text)\n      formData.append('emotion', recordingInput.emotion)\n      formData.append('is_active', recordingInput.is_active ? 'true' : 'false')\n      formData.append('file', buffer, { knownLength: fileSizeInBytes })\n  \n      const response = await fetch(context.endpoint('v2', `voices/${voiceUuid}/recordings`), {\n        method: 'POST',\n        headers: {\n          Authorization: context.headers().Authorization,\n          'Content-Type': 'multipart/form-data',\n          ...formData.getHeaders ? formData.getHeaders() : {}\n        },\n        body: formData\n      })\n  \n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  update: async (voiceUuid: string, uuid: string, recordingInput: RecordingInput): Promise<UpdateResponseV2<Recording> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.put(`voices/${voiceUuid}/recordings/${uuid}`, recordingInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  destroy: async (voiceUuid: string, uuid: string): Promise<DeleteResponseV2 | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.delete(`voices/${voiceUuid}/recordings/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n\n}\n\n","import UtilV2, { DeleteResponseV2, ErrorResponseV2, PaginationResponseV2, ReadResponseV2, UpdateResponseV2, WriteResponseV2 } from \"./util\"\n\nexport interface Voice {\n  uuid: string\n  name: string\n  status: string\n  default_language: string\n  supported_languages: string[]\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface VoiceInput {\n  name: string\n  dataset_url?: string\n  callback_uri?: string\n}\n\nexport default {\n  all: async (page: number, pageSize: number): Promise<PaginationResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices?page=${page}${pageSize ? `&page_size=${pageSize}` : ''}`)\n      const json = await response.json()\n      if (json.success) json.items.map(item => ({\n        ...item,\n        created_at: new Date(item.created_at),\n        updated_at: new Date(item.updated_at)\n      }))\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  get: async (uuid: string): Promise<ReadResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.get(`voices/${uuid}`)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  create: async (voiceInput: VoiceInput): Promise<WriteResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.post('voices', voiceInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  update: async (uuid: string, voiceInput: VoiceInput): Promise<UpdateResponseV2<Voice> | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.put(`voices/${uuid}`, voiceInput)\n      let json = await response.json()\n      if (json.success) {\n        json = {\n          ...json,\n          item: {\n            ...json.item,\n            created_at: new Date(json.item.created_at),\n            updated_at: new Date(json.item.updated_at)\n          }\n        }\n      }\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  destroy: async (uuid: string): Promise<DeleteResponseV2 | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.delete(`voices/${uuid}`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  },\n  \n  build: async (uuid: string): Promise<{ success: boolean, message?: string } | ErrorResponseV2> => {\n    try {\n      const response = await UtilV2.post(`voices/${uuid}/build`)\n      const json = response.json()\n      return json\n    } catch (e) {\n      return UtilV2.errorResponse(e)\n    }\n  }\n}","import { context } from './context'\nimport ProjectsV2 from './v2/projects'\nimport ClipsV2 from './v2/clips'\nimport RecordingsV2 from './v2/recordings'\nimport VoicesV2 from './v2/voices'\n\n\nexport const Resemble = {\n  setApiKey: context.setApiKey,\n  setBaseUrl: context.setBaseUrl,\n  setSynthesisUrl: context.setSynthesisUrl,\n  \n  v2: {\n    projects: {\n      all: ProjectsV2.all,\n      create: ProjectsV2.create,\n      update: ProjectsV2.update,\n      get: ProjectsV2.get,\n      delete: ProjectsV2.destroy,\n    },\n    clips: {\n      all: ClipsV2.all,\n      createSync: ClipsV2.createSync,\n      createAsync: ClipsV2.createAsync,\n      updateAsync: ClipsV2.updateAsync,\n      // stream: ClipsV2.stream,\n      get: ClipsV2.get,\n      delete: ClipsV2.destroy,\n    },\n    voices: {\n      all: VoicesV2.all,\n      create: VoicesV2.create,\n      update: VoicesV2.update,\n      build: VoicesV2.build,\n      get: VoicesV2.get,\n      delete: VoicesV2.destroy,\n    },\n    recordings: {\n      all: RecordingsV2.all,\n      get: RecordingsV2.get,\n      create: RecordingsV2.create,\n      update: RecordingsV2.update,\n      delete: RecordingsV2.destroy,\n    },\n  },\n}\n"],"names":["apiKey","baseUrl","synthesisServerHeaders","headers","Authorization","context","setBaseUrl","url","endsWith","setApiKey","key","setSynthesisUrl","synthesisServerUrl","endpoint","version","ending","startsWith","substring","synServerUrl","UtilV2","path","useSynthesisServer","fetch","method","data","body","JSON","stringify","e","success","message","ProjectsV2","all","async","page","pageSize","json","response","items","map","item","_extends","created_at","Date","updated_at","get","uuid","create","projectInput","update","destroy","projectUuid","clipInput","ClipsV2","createAsync","createSync","updateAsync","RecordingsV2","voiceUuid","recordingInput","buffer","fileSizeInBytes","formData","FormData","append","name","text","emotion","is_active","knownLength","getHeaders","VoicesV2","voiceInput","build","Resemble","v2","projects","delete","clips","voices","recordings"],"mappings":"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"}